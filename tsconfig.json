{
  "include": [
    "./eslint.config.js",
    "./src/**/*",
  ],
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */
    /* Projects */
    "incremental": true /* default true if composite true. Save .tsbuildinfo files to allow for incremental compilation of projects. */,
    "composite": false /* Enable constraints that allow a TypeScript project to be used with project references. */,
    "tsBuildInfoFile": "./built/.tsbuildinfo", /* Note to self: see what the default behavior is. No reason to touch unless default doesn't work with existing composite structure. Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": false /* Disable preferring source files instead of declaration files when referencing composite projects. */,
    // "disableSolutionSearching": false /* Opt a project out of multi-project reference checking when editing. */,
    // "disableReferencedProjectLoad": false /* Reduce the number of projects loaded automatically by TypeScript. */,
    /* Language and Environment */
    "target": "ES6" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "ES2022.Error"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    // "noLib": false /* Disable including any library files, including the default lib.d.ts. */,
    "useDefineForClassFields": false /* Default true if ES2022 or ESNext, else default false. Emit ECMAScript-standard-compliant class fields. */,
    "moduleDetection": "auto" /* Default: auto. Seems like it's more relevant to module: nodenext or module: node16 or react-jsx, but less so to commonjs. Control what method is used to detect module-format JS files. */,
    /* Modules */
    "module": "esnext" /* Default: if target ES6, commonjs. commonjs is required for Scriptable. See more here: https://devblogs.microsoft.com/typescript/announcing-typescript-4-7/#esm-nodejs && here https://www.typescriptlang.org/tsconfig#moduleResolution Specify what module code is generated. */,
    "rootDir": "./src", /* Specify the root folder within your source files. When composite is on, the rootDir setting, if not explicitly set, defaults to the directory containing the tsconfig.json file.*/
    "moduleResolution": "bundler" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "baseUrl": "./", /* Specify the base directory to resolve non-relative module names. */
    "paths": {
      "*": [
        "node_modules/*",
      ]
    }, /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [
    //   "node_modules/@types"
    // ],
    "types": [
      "node",
      "scriptable-ios",
    ], /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowArbitraryExtensions": false,
    // "allowImportingTsExtensions": false /* allows TypeScript files to import each other with a TypeScript extension like .ts, .mts, or .tsx. This flag is only allowed when --noEmit or --emitDeclarationOnly is enabled, since these import paths would not be resolvable at runtime in JavaScript output files. The expectation here is that your resolver (e.g. your bundler, a runtime, or some other tool) is going to make these imports between .ts files workAllow importing .ts files even when --allowJs is off. */,
    "resolveJsonModule": true /* Enable importing .json files. */,
    // "resolvePackageJsonExports": false,
    // "resolvePackageJsonImports": false,
    "noResolve": true, /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
    /* JavaScript Support */
    // "allowJs": false /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,
    // "checkJs": false /* Enable error reporting in type-checked JavaScript files. */,
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
    /* Emit */
    "declaration": true /* Default true when composite is on. Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "declarationMap": true /* Create sourcemaps for d.ts files. */,
    // "emitDeclarationOnly": false /* Only output d.ts files and not JavaScript files. */,
    "sourceMap": false /* Create source map files for emitted JavaScript files. */,
    "outDir": "./built/js", /* Specify an output folder for all emitted files. */
    "removeComments": false /* Disable emitting comments. */,
    // "noEmit": false /* Disable emitting files from a compilation. */,
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove" /* Specify emit/checking behavior for imports that are only used for types. */,
    // "downlevelIteration": false /* Emit more compliant, but verbose and less performant JavaScript for iteration. */,
    // "inlineSourceMap": false /* Include sourcemap files inside the emitted JavaScript. */,
    // "inlineSources": false /* Include source code in the sourcemaps inside the emitted JavaScript. */,
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    "noEmitOnError": true /* Disable emitting files if any type checking errors are reported. */,
    // "preserveConstEnums": false /* Disable erasing 'const enum' declarations in generated code. */,
    "declarationDir": "./built/d", /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": false /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */,
    /* Interop Constraints */
    // "isolatedModules": false /* Ensure that each file can be safely transpiled without relying on other imports. */,
    "verbatimModuleSyntax": true, /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
    "strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
    "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
    "strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
    "noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
    "useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
    "alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
    "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
    "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
    "exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,
    "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
    "noPropertyAccessFromIndexSignature": false /* Enforces using indexed accessors for keys declared using an indexed type. */,
    "allowUnusedLabels": false /* Disable error reporting for unused labels. */,
    "allowUnreachableCode": false /* Disable error reporting for unreachable code. */,
    /* Completeness */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}
